[{"C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\index.js":"1","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\App.js":"2","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\reportWebVitals.js":"3","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\Header.js":"4","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\Navbar.js":"5","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\Footer.js":"6","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\AddItem.js":"7","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\ItemList.js":"8","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\EditItem.js":"9","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\History.js":"10","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\forms\\StockoutForm.js":"11","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\forms\\RestockForm.js":"12","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\forms\\EditForm.js":"13"},{"size":650,"mtime":1696932390573,"results":"14","hashOfConfig":"15"},{"size":1798,"mtime":1697169651315,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1696380369379,"results":"17","hashOfConfig":"15"},{"size":169,"mtime":1696817377207,"results":"18","hashOfConfig":"15"},{"size":577,"mtime":1697172493688,"results":"19","hashOfConfig":"15"},{"size":131,"mtime":1696913353558,"results":"20","hashOfConfig":"15"},{"size":2722,"mtime":1697159711675,"results":"21","hashOfConfig":"15"},{"size":796,"mtime":1697157721115,"results":"22","hashOfConfig":"15"},{"size":5923,"mtime":1697171192620,"results":"23","hashOfConfig":"15"},{"size":965,"mtime":1697169047003,"results":"24","hashOfConfig":"15"},{"size":2107,"mtime":1697170505978,"results":"25","hashOfConfig":"15"},{"size":1949,"mtime":1697169987046,"results":"26","hashOfConfig":"15"},{"size":1420,"mtime":1697169984005,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d7zxgo",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},"C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\index.js",[],[],"C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\App.js",["71"],[],"\n\nimport { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//import components\nimport Header from './components/Header';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport AddItem from './components/AddItem';\nimport ItemList from './components/ItemList';\nimport EditItem from './components/EditItem';\nimport History from './components/History';\n\n\n//import route for navbar.\nimport {Route, Routes} from 'react-router-dom';\n\n// Use this as a counter\n// that is incremented to provide\n// a key props for new item to be added\n// to the list\nlet nextId = 0;\n\nfunction App() {\n\n\n  // initially empty array for state\n  // to be used to keep track of inventory items\n  let [inventory, setInventory] = useState([]); // number\n\n\n  function addInventoryItemClick(name, description, quantity) {\n\n    let newInventoryItem = { id: nextId++, itemName: name, itemDescription : description,  itemQuantity : quantity }; //create object with values from add item\n\n    setInventory([...inventory, newInventoryItem]); //insert the object values to the inventory array\n  }\n\n\n  let [history, setHistory] = useState([]);\n  \n\n  return (\n    <>\n    <Header/>\n      <Navbar/>\n      <div className=\"main-container\">\n        <Routes>\n          <Route path=\"/\" element={<ItemList inventoryArray={inventory}/>}></Route>\n          <Route path=\"/add\" element={<AddItem onAddNewItem={addInventoryItemClick}/>}></Route>\n          <Route path=\"/edit\" element={< EditItem inventoryArray2={inventory} inventorySetter={setInventory} historyArray={history} historySetter={setHistory}/>}></Route>\n          <Route path=\"/history\" element={<History historyArray={history}/>}></Route>\n        </Routes>\n    </div>\n    <Footer/>\n    </>\n    \n  );\n}\n\nexport default App;\n\n\n\n","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\reportWebVitals.js",[],[],"C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\Header.js",[],[],"C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\Navbar.js",[],[],"C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\Footer.js",[],[],"C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\AddItem.js",[],[],"C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\ItemList.js",[],[],"C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\EditItem.js",[],[],"C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\History.js",[],[],"C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\forms\\StockoutForm.js",["72","73","74","75"],[],"import React, { useState } from 'react';\r\n\r\nfunction StockoutForm({item, onSaveChanges, onClose, addHistory}){\r\n\r\n    const [id,setID] = useState(item.id);\r\n    const [name, setName] = useState(item.itemName);\r\n    const [description, setDescription] = useState(item.itemDescription);\r\n    const [quantity, setQuantity] = useState(item.itemQuantity);\r\n\r\n    const [person, setPerson] = useState(\"None\");\r\n    const [historyQuantity, setHistoryQuantity] = useState(0);\r\n\r\n    const handleSave = () => {\r\n    const updatedItem = { // create object called \"updatedItem\" and store data in it.\r\n        ...item, //spread\r\n        itemName: name,\r\n        itemDescription: description,\r\n        itemQuantity: parseInt(quantity) - parseInt(historyQuantity), //old value minus new value for moving out stock\r\n        };\r\n        onSaveChanges(updatedItem); //this function from EditItem.js pass the updated details to it.\r\n\r\n        let action = \"Send Stock Out\";\r\n        let nameOfClass = \"history-out\";\r\n\r\n        addHistory(id, name, description, action, historyQuantity, person, nameOfClass);\r\n        onClose();//This also from EditItem.js, will close the form.\r\n    };\r\n\r\n    return (\r\n    <div className=\"edit-form\">\r\n        <h3>Send Stock Out</h3>\r\n            <label>ID: {id}</label>\r\n            <br/>\r\n            <label>Name:{name}</label>\r\n            <br/>\r\n            <label>Description: {description} </label>\r\n            <br/>\r\n            <label>Current Quantity: {quantity}</label>\r\n            <br/>\r\n            <label>Send Out Quantity: <input type=\"number\" onChange={(e) => setHistoryQuantity(e.target.value) } /></label>\r\n            <br/>\r\n            <label>Receiver: <input type=\"text\" value={person} onChange={(e) => setPerson(e.target.value)} /></label>\r\n            <br/>\r\n            <div className=\"edit-form-button\">\r\n                <button className=\"save-edit\" onClick={handleSave}>Save Changes</button>\r\n                <button className=\"cancel-edit\" onClick={onClose}>Cancel</button>\r\n            </div>\r\n        \r\n    </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default StockoutForm;","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\forms\\RestockForm.js",["76","77","78","79"],[],"import React, { useState } from 'react';\r\n\r\nfunction RestockForm( {item, onSaveChanges, onClose, addHistory}){\r\n\r\n    const [id,setID] = useState(item.id);\r\n    const [name, setName] = useState(item.itemName);\r\n    const [description, setDescription] = useState(item.itemDescription);\r\n    const [quantity, setQuantity] = useState(item.itemQuantity);\r\n\r\n    const [person, setPerson] = useState(\"None\");\r\n    const [historyQuantity, setHistoryQuantity] = useState(0);\r\n\r\n    const handleSave = () => {\r\n    const updatedItem = { // create object called \"updatedItem\" and store data in it.\r\n        ...item, //spread\r\n        itemName: name,\r\n        itemDescription: description,\r\n        itemQuantity: parseInt(quantity) + parseInt(historyQuantity), //new value add with old value for restock\r\n        };\r\n        onSaveChanges(updatedItem); //this function from EditItem.js pass the updated details to it.\r\n\r\n        let action = \"Restock\";\r\n        let nameOfClass = \"history-in\";\r\n\r\n        addHistory(id, name, description, action, historyQuantity, person, nameOfClass);\r\n        onClose();//This also from EditItem.js, will close the form.\r\n    };\r\n\r\n    return (\r\n    <div className=\"edit-form\">\r\n        <h3>Restock Item</h3>\r\n            <label>ID: {id}</label>\r\n            <br/>\r\n            <label>Name:{name}</label>\r\n            <br/>\r\n            <label>Description: {description} </label>\r\n            <br/>\r\n            <label>Current Quantity: {quantity}</label>\r\n            <br/>\r\n            <label>Restock Quantity: <input type=\"number\" onChange={(e) => setHistoryQuantity(e.target.value) } /></label>\r\n            <br/>\r\n            <label>Supplier: <input type=\"text\" value={person} onChange={(e) => setPerson(e.target.value)} /></label>\r\n            <br/>\r\n        <button onClick={handleSave}>Save Changes</button>\r\n        <button onClick={onClose}>Cancel</button>\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default RestockForm;","C:\\Users\\ACER\\Desktop\\Project\\inventory\\src\\components\\forms\\EditForm.js",["80"],[],"import React, { useState } from 'react';\r\n\r\nfunction EditForm({ item, onSaveChanges, onClose }) {\r\n\r\n    const [id,setID] = useState(item.id);\r\n    const [name, setName] = useState(item.itemName);\r\n    const [description, setDescription] = useState(item.itemDescription);\r\n    const [quantity, setQuantity] = useState(item.itemQuantity);\r\n\r\n    const handleSave = () => {\r\n    const updatedItem = { // create object called \"updatedItem\" and store data in it.\r\n        ...item, //spread\r\n        itemName: name,\r\n        itemDescription: description,\r\n        itemQuantity: quantity,\r\n        };\r\n        onSaveChanges(updatedItem); //this function from EditItem.js pass the updated details to it.\r\n        onClose();//This also from EditItem.js, will close the form.\r\n    };\r\n\r\n    return (\r\n    <div className=\"edit-form\">\r\n        <h3>Edit Item</h3>\r\n            <label>ID: {id}</label>\r\n            <label>Name: <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} /></label>\r\n            <label>Description: <input type=\"text\" value={description} onChange={(e) => setDescription(e.target.value)} /></label>\r\n            <label>Quantity: <input type=\"number\" value={quantity} onChange={(e) => setQuantity(e.target.value)} /></label>\r\n        <button onClick={handleSave}>Save Changes</button>\r\n        <button onClick={onClose}>Cancel</button>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default EditForm;\r\n",{"ruleId":"81","severity":1,"message":"82","line":4,"column":8,"nodeType":"83","messageId":"84","endLine":4,"endColumn":12},{"ruleId":"81","severity":1,"message":"85","line":5,"column":15,"nodeType":"83","messageId":"84","endLine":5,"endColumn":20},{"ruleId":"81","severity":1,"message":"86","line":6,"column":18,"nodeType":"83","messageId":"84","endLine":6,"endColumn":25},{"ruleId":"81","severity":1,"message":"87","line":7,"column":25,"nodeType":"83","messageId":"84","endLine":7,"endColumn":39},{"ruleId":"81","severity":1,"message":"88","line":8,"column":22,"nodeType":"83","messageId":"84","endLine":8,"endColumn":33},{"ruleId":"81","severity":1,"message":"85","line":5,"column":15,"nodeType":"83","messageId":"84","endLine":5,"endColumn":20},{"ruleId":"81","severity":1,"message":"86","line":6,"column":18,"nodeType":"83","messageId":"84","endLine":6,"endColumn":25},{"ruleId":"81","severity":1,"message":"87","line":7,"column":25,"nodeType":"83","messageId":"84","endLine":7,"endColumn":39},{"ruleId":"81","severity":1,"message":"88","line":8,"column":22,"nodeType":"83","messageId":"84","endLine":8,"endColumn":33},{"ruleId":"81","severity":1,"message":"85","line":5,"column":15,"nodeType":"83","messageId":"84","endLine":5,"endColumn":20},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'setID' is assigned a value but never used.","'setName' is assigned a value but never used.","'setDescription' is assigned a value but never used.","'setQuantity' is assigned a value but never used."]